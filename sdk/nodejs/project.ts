// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Project extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'gcp-scaffold:index:project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * The ID of the project.
     */
    public readonly projectID!: pulumi.Output<string>;
    /**
     * The display name of the project.
     */
    public readonly projectName!: pulumi.Output<string>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.ComponentResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.projectID === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectID'");
            }
            inputs["activatedApis"] = args ? args.activatedApis : undefined;
            inputs["billingAccountID"] = args ? args.billingAccountID : undefined;
            inputs["folderID"] = args ? args.folderID : undefined;
            inputs["orgID"] = args ? args.orgID : undefined;
            inputs["projectID"] = args ? args.projectID : undefined;
            inputs["projectName"] = args ? args.projectName : undefined;
        } else {
            inputs["projectID"] = undefined /*out*/;
            inputs["projectName"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Project.__pulumiType, name, inputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * A list of APIs to be managed as part of the project
     */
    activatedApis?: string[];
    /**
     * The ID of the billing account this project belongs to. If not specified, then you may not specify APIs to activate for the project.
     */
    billingAccountID?: string;
    /**
     * The numeric ID of the folder this project should be created under. Conflicts with `orgID`.
     */
    folderID?: pulumi.Input<string>;
    /**
     * The numeric ID of the organization this project belongs to. Conflicts with `projectID`.
     */
    orgID?: string;
    /**
     * The project ID.
     */
    projectID: string;
    /**
     * The display name of the project. ProjectID will be used as the display name if empty
     */
    projectName?: string;
}
